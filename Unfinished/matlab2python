#!/usr/bin/env python3
#
# matlab2python
# 2020-10-19: Written by Steven J. DeRose.
#
from __future__ import print_function
import sys, os
import codecs
import re
#import string
#import math

from PowerWalk import PowerWalk, PWType
#from sjdUtils import sjdUtils
#from alogging import ALogger
#su = sjdUtils()
#lg = ALogger(1)

PY2 = sys.version_info[0] == 2
PY3 = sys.version_info[0] == 3
if PY3:
    #from html.parser import HTMLParser
    #from html.entities import codepoint2name, name2codepoint
    #from io import StringIO
    def unichr(n): return chr(n)
    def unicode(s, encoding='utf-8', errors='strict'): str(s, encoding, errors)

__metadata__ = {
    'title'        : "matlab2python",
    'rightsHolder' : "Steven J. DeRose",
    'creator'      : "http://viaf.org/viaf/50334488",
    'type'         : "http://purl.org/dc/dcmitype/Software",
    'language'     : "Python 3.7",
    'created'      : "2020-10-19",
    'modified'     : "2020-10-19",
    'publisher'    : "http://github.com/sderose",
    'license'      : "https://creativecommons.org/licenses/by-sa/3.0/"
}
__version__ = __metadata__['modified']


descr = """
=Description=

A quick hack to roughly translate Matlab code to python/numpy.

This is far from complete, but already should save some tedium.


==Usage==

    matlab2python [options] [files]


=Related Commands=

[http://mathesaurus.sourceforge.net/matlab-numpy.html]

=Known bugs and Limitations=


=History=

* 2020-10-19: Written by Steven J. DeRose.


=To do=


=Rights=

Copyright 2020-10-19 by Steven J. DeRose. This work is licensed under a
Creative Commons Attribution-Share-alike 3.0 unported license.
See [http://creativecommons.org/licenses/by-sa/3.0/ for more information].

For the most recent version, see [http://www.derose.net/steve/utilities]
or [https://github.com/sderose].


=Options=
"""


def warn(lvl, msg):
    if (args.verbose >= lvl): sys.stderr.write(msg + "\n")
    if (lvl < 0): sys.exit()


###############################################################################
#
# Operations:
#    Rename function
#    Function to method & v/v
#    Swap params
#    Add package

# First item 1 means surround with \b
#
changeList = [
    [ 1, r'^([^\'"]*)%',             '\\1#'],

    [ 1, r'if (.*)',                 'if (\\1):' ],
    [ 1, r'elseif (.*)',             'elif (\\1):' ],
    [ 1, r'else (.*)',               'else:' ],
    [ 1, r'end\b',                   '#end' ],

    [ 1, r'for (.*)',                'for (\\1):' ],
    [ 1, r'while (.*)',              'while (\\1):' ],
    # case

    [ 1, r'(sqrt|log|log10|exp|round|pi|exp)\(', 'math.\1(' ],
    [ 1, r'log2\((.*)\)',            'math.log(\\1, 2)' ],  #####
    [ 1, r'atan\((.*),(.*)\)',       'atan2(\\2,\\1)' ],
    [ 1, r'rand\((.*)\)',            'random.uniform(0,1, (\\1,\\1))' ],

    [ 0, r'&&',                      ' and ' ],
    [ 0, r'\|\|',                    ' or ' ],
    # & | xor() ~
    [ 1, r'NaN\b',                   'nan' ],
    [ 1, r'Inf\b',                   'inf' ],
    [ 1, r'(\d+\+\d+)i',             '\\1j' ],
    [ 1, r'(real|imag|conj)\((.*)\)', '\\2.\\1' ],

    [ 0, r';\s*$',                   '' ],
    [ 1, r'function\b(.*)(%(.*))?',   'def\\1:#\\3' ],
    [ 0, r'@(\w+)',                  ' \\1' ],

    # [a b]           concatenate
    # x(i,j)          x[i:j]
    # a(x:end         a[1:]
    # a(end)          a[-1]
    # a(end-1:end)    a[-2:]
    # @min            min
    # size            len
    # new_ind = 2:2:2*dim2
    # [dim1, dim2] = size(input_matrix)
    # function [output_matrix] = mypool(input_matrix, pool_size, method)
    # %x
]

for i in range(len(changeList)):
    b, fr, to = changeList[i]
    if (b): changeList[i][1] = r'\b' + fr

def fixLine(rec):
    for b, fr, to in changeList:
         rec = re.sub(fr, to, rec)
    return rec


###############################################################################
#
def doAllFiles(pathlist):
    for path in pathlist:
        if (os.path.isdir(path)):
            if (not args.recursive): continue
            children = os.listdir(path)
            for ch in children:
                doAllFiles(ch)
        else:
            doOneFile(path)

def doOneFile(path):
    """Read and deal with one individual file.
    """
    if (not path):
        if (sys.stdin.isatty()): print("Waiting on STDIN...")
        fh = sys.stdin
    else:
        try:
            fh = codecs.open(path, "rb", encoding=args.iencoding)
        except IOError as e:
            sys.stderr.write("Cannot open '%s':\n    %s" %
                (e), stat="readError")
            return 0

    recnum = 0
    for rec in fh.readlines():
        recnum += 1
        rec = fixLine(rec.rstrip())
        print(rec)
    return(recnum)


###############################################################################
# Main
#
if __name__ == "__main__":
    import argparse
    def anyInt(x):
        return int(x, 0)

    def processOptions():
        try:
            from BlockFormatter import BlockFormatter
            parser = argparse.ArgumentParser(
                description=descr, formatter_class=BlockFormatter)
        except ImportError:
            parser = argparse.ArgumentParser(description=descr)

        parser.add_argument(
            "--iencoding",        type=str, metavar='E', default="utf-8",
            help='Assume this character coding for input. Default: utf-8.')
        parser.add_argument(
            "--oencoding",        type=str, metavar='E', default="utf-8",
            help='Use this character coding for output. Default: iencoding.')
        parser.add_argument(
            "--quiet", "-q",      action='store_true',
            help='Suppress most messages.')
        parser.add_argument(
            "--unicode",          action='store_const',  dest='iencoding',
            const='utf8', help='Assume utf-8 for input files.')
        parser.add_argument(
            "--verbose", "-v",    action='count',       default=0,
            help='Add more messages (repeatable).')
        parser.add_argument(
            "--version", action='version', version=__version__,
            help='Display version information, then exit.')

        parser.add_argument(
            'files',             type=str,
            nargs=argparse.REMAINDER,
            help='Path(s) to input file(s)')

        args0 = parser.parse_args()
        return(args0)

    ###########################################################################
    #
    fileCount = 0
    args = processOptions()
    if (args.iencoding and not args.oencoding):
        args.oencoding = args.iencoding
    if (args.oencoding):
        # https://stackoverflow.com/questions/4374455/
        if (PY2): sys.stdout = codecs.getwriter("utf-8")(sys.stdout)
        #else: sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
            # 3.7+ sys.stdout.reconfigure(encoding='utf-8')


    if (len(args.files) == 0):
        warn(0, "matlab2python: No files specified....")
        doOneFile(None)
    else:
        pw = PowerWalk(args.files, open=False, close=False,
            encoding=args.iencoding, recursive=False)
        for path0, fh0, what0 in pw.traverse():
            if (what0 != PWType.LEAF): continue
            fileCount += 1
            doOneFile(path0)

    if (not args.quiet):
        warn(0, "matlab2python: Done.")
